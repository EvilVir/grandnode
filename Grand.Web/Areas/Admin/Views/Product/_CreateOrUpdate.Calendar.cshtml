@model ProductModel
@inject AdminAreaSettings adminAreaSettings
@using Grand.Core.Domain.Catalog;
@if (!String.IsNullOrEmpty(Model.Id))
{
    <vc:admin-widget widget-zone="product_details_calendar_top" additional-data="Model" />
    <div class="panel panel-default">
        <div class="panel-heading">

            <span>
                <span>@T("Admin.Catalog.Products.Calendar.Resource"):</span>
                <input id="reservations-resource" />
            </span>

            <span style="padding-left: 20px;">
                <span>@T("Admin.Catalog.Products.Calendar.Date"):</span>
                <input id="reservations-filter-date-from" /> - <input id="reservations-filter-date-to" />
            </span>

            <button id="btnReservationsResourceRefresh" type="button" class="btn k-pager-refresh k-link" aria-label="Refresh" href="#"><span class="k-icon k-i-reload"></span></button>
        </div>
        <div class="panel-body">
            <div id="reservations-grid"></div>
        </div>
        <div class="panel-footer">
            <button id="generateCalendar" type="button" class="btn btn-primary">@T("Admin.Catalog.Products.Calendar.Generatecalendar")</button>
            <button id="clearOld" type="button" class="btn btn-secondary" style="margin-left:10px">@T("Admin.Catalog.Products.Calendar.Clearold")</button>
            <button id="clearCalendar" type="button" class="btn btn-danger" style="margin-left:10px">@T("Admin.Catalog.Products.Calendar.Clearcalendar")</button>
        </div>
    </div>

    <vc:admin-widget widget-zone="product_details_calendar_bottom" additional-data="Model" />

    <script type="text/javascript">

        $(document).ready(function () {

            // Buttons
            $('#generateCalendar').click(function (e) {
                e.preventDefault();
                var baseUrl = '@Html.Raw(Url.Action("GenerateCalendarPopup", "Product", new { productId = Model.Id, btnId = "btnReservationsResourceRefresh", formId = "product-form" }))';
                OpenWindow(baseUrl + '&resourceSystemName=' + getSelectedResource(), 800, 600, true);
                return false;
            });

            $("#clearCalendar").click(function () {
                if (confirm('@T("Admin.Common.AreYouSure")')) {
                    var postData = {
                        productId: '@(Model.Id)'
                    };

                    addAntiForgeryToken(postData);

                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("ClearCalendar", "Product"))?resourceSystemName=" + getSelectedResource(),
                        dataType: 'json',
                        data: postData,
                        success: function (data) {
                            var grid = $("#reservations-grid").data('kendoGrid');
                            grid.dataSource.read();
                        },
                        error: function () {
                            alert('Error');
                        }
                    });
                }
            });

            $("#clearOld").click(function () {
                var postData = {
                    productId: '@(Model.Id)'
                };

                addAntiForgeryToken(postData);

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("ClearOld", "Product"))?resourceSystemName=" + getSelectedResource(),
                    dataType: 'json',
                    data: postData,
                    success: function (data) {
                        var grid = $("#reservations-grid").data('kendoGrid');
                        grid.dataSource.read();
                    },
                    error: function () {
                        alert('Error');
                    }
                });
            });

            var calendarGridBaseUrl = "@Html.Raw(Url.Action("ListReservations", "Product", new { productId = Model.Id }))";

            function getSelectedResource() {
                return $("#reservations-resource").data("kendoDropDownList").value();
            }

            function getSelectedFromDate() {
                return $("#reservations-filter-date-from").data("kendoDatePicker").value();
            }

            function getSelectedToDate() {
                return $("#reservations-filter-date-to").data("kendoDatePicker").value();
            }

            function onResourceDataBound(e) {
                reloadGrid(getSelectedResource(), getSelectedFromDate(), getSelectedToDate());
            };

            function onResourceSelect(e) {
                reloadGrid(e.dataItem ? e.dataItem.SystemName : null, getSelectedFromDate(), getSelectedToDate());
            };

            function onDateFromFilterChange() {
                reloadGrid(getSelectedResource(), this.value(), getSelectedToDate());
            }

            function onDateToFilterChange() {
                reloadGrid(getSelectedResource(), getSelectedFromDate(), this.value());
            }

            function reloadGrid(resource, dateFrom, dateTo) {

                var newUrl = calendarGridBaseUrl + (resource ? "&resourceSystemName=" + resource : "") +
                    (dateFrom ? "&dateFrom=" + kendo.toString(dateFrom, "@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern") : "") +
                    (dateTo ? "&dateTo=" + kendo.toString(dateTo, "@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern") : "");

                var dataSource = $("#reservations-grid").data("kendoGrid").dataSource;
                dataSource.transport.options.read.url = newUrl;
                dataSource.read();
            };

            // Available resources list
            $("#reservations-resource").kendoDropDownList({
                dataTextField: "Name",
                dataValueField: "SystemName",
                dataBound: onResourceDataBound,
                select: onResourceSelect,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("ResourceList", "Product", new { productId = Model.Id }))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                    }
                }
            });

            // Date pickers
            $("#reservations-filter-date-from").kendoDatePicker({
                change: onDateFromFilterChange,
            });

            $("#reservations-filter-date-to").kendoDatePicker({
                change: onDateToFilterChange,
            });

            $("#btnReservationsResourceRefresh").click(function (e) {
                e.preventDefault();
                $("#reservations-resource").data("kendoDropDownList").dataSource.read();
                return false;
            });

            // Calendar grid
            $("#reservations-grid").kendoGrid({
                autoBind: false,
                dataSource: {
                    transport: {
                        read: {
                            url: calendarGridBaseUrl,
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken,
                        }, destroy: {
                            url: "@Html.Raw(Url.Action("ProductReservationDelete", "Product"))",
                            type: "POST",
                            dataType: "json",
                            data: addAntiForgeryToken
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "Id",
                        }
                    },
                    error: function (e) {
                        display_kendoui_grid_error(e);
                        this.cancelChanges();
                    },
                    pageSize: @(adminAreaSettings.DefaultGridPageSize),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                pageable: {
                    refresh: false,
                    pageSizes: [@(adminAreaSettings.GridPageSizes)]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                columns: [{
                    field: "Date",
                    title: "@T("Admin.Catalog.Products.Calendar.Date")",
                    width: 200,
                    type: "date",
                    format: "{0:G}"
                }, {
                    field: "Parameter",
                    title: "@T("Admin.Catalog.Products.Calendar.Parameter")",
                    width: 200
                }, {
                    field: "Duration",
                    title: "@T("Admin.Catalog.Products.Calendar.Duration")",
                    width: 200
                }, {
                    field: "OrderId",
                    title: "@T("Admin.Catalog.Products.Calendar.OrderId")",
                    width: 200,
                    template: '# if(OrderId) {# <span>#=OrderId#</span> <a class="btn btn-sm btn-default" href="@Url.Content("~/Admin/Order/Edit/")#=OrderId#"><i class="fa fa-search"></i> @T("Admin.Common.View")</a>  #} #'
                }, {
                    command: [{
                        name: "destroy",
                        text: "@T("Admin.Common.Delete")"
                    }],
                    width: 100
                }]
            });

        });

    </script>

}
else
{
    <div class="note note-info">
        @T("Admin.Catalog.Products.Calendar.SaveBeforeEdit")
    </div>
}
