@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title, meta
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}

@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page product-standard">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">

            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <h2 class="generalTitle" itemprop="name">
                    @Model.Name
                </h2>

                <!-- Short description and photos -->
                <div class="row">
                    <div class="col-12 col-md-6">
                        @if (!String.IsNullOrEmpty(Model.ShortDescription))
                        {
                        <div class="short-description generalMarginSupporter">
                            @Html.Raw(Model.ShortDescription)
                        </div>
                        }

                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", additionalData = Model.Id })
                        <div>
                            <partial name="_ShareButton" model="Model" />
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                    </div>

                    <!-- Gallery -->
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                    <partial name="_ProductDetailsPictures" model="Model" />
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
                </div>

                <div class="row reservation">
                    <div class="col-12">
                        <h2 class="generalTitle">@T("Products.Reservation.DoIt")</h2>
                    </div>

                    <!-- Reservations calendar -->
                    <div class="col-12 col-md-4">
                        @if (Model.ProductType == ProductType.Reservation)
                        {
                            var dataDictReservation = new ViewDataDictionary(ViewData);
                            dataDictReservation.TemplateInfo.HtmlFieldPrefix = string.Format("reservation_{0}", Model.Id);
                            <partial name="_ReservationInfo" model="Model" view-data="dataDictReservation" />
                        }
                    </div>

                    <!-- Reservations attributes, gift cards, special prices -->
                    <div class="col=12 col-md-8 mt-3 mt-md-0">
                        @{
                                var dataDictPrice = new ViewDataDictionary(ViewData);
                                dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);

                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);

                                var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
                        }

                        <div>
                            <partial name="_ProductPrice" model="Model.ProductPrice" view-data="dataDictPrice" />
                        </div>
                        <div>
                            @{
                                <partial name="_ProductAttributes" model="Model.ProductAttributes" view-data="dataDictAttributes" />
                            }
                        </div>
                        <div>
                            @{
                                <partial name="_GiftCardInfo" model="Model.GiftCard" view-data="dataDictGiftCard" />
                            }
                        </div>
                        <div>
                            @{
                                <partial name="_ProductTierPrices" model="Model.TierPrices" />
                            }
                        </div>
                    </div>

                    <div class="col-12 add-to-cart-group">
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", additionalData = Model.Id })
                        @{
                                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                        var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                        }

                        <div>
                            <span class="actual-price price-value-@(Model.ProductPrice.ProductId)">@Html.Raw(Model.ProductPrice.Price)</span>
                            <partial name="_AddToCart" model="Model.AddToCart" view-data="dataDictAddToCart" />
                        </div>
                    </div>
                </div>

                <!-- Long details -->
                <div class="row full-description">
                    <div class="col-12">
                        <h2 class="generalTitle">@T("Products.Reservation.FullDescription")</h2>
                        @Html.Raw(Model.FullDescription)
                    </div>
                </div>

                <div class="row">
                    <!--wishlist, compare, email a friend-->
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id })
                    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                    @await Component.InvokeAsync("SimilarProducts", new { productId = Model.Id })
                </div>
            </div>

        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
</div>
<script asp-location="Footer">
    $('.add-to-compare-list-button, .ask-a-question-button, .email-a-friend-button').tooltip({
        boundary: 'window',
        template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>'
    });
</script>