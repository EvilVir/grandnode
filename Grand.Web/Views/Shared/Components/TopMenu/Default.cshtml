@model TopMenuModel

@await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_before" })
    @if (Model.DisplayHomePageMenu)
    {
        <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
    }
    @{
        var rootCategories = Model.Categories.ToList();
    }
    @foreach (var category in rootCategories)
    {
        var categoryLineModel = new TopMenuModel.CategoryLineModel
        {
            Category = category
        };

        <partial name="_CategoryLine.TopMenu" model="categoryLineModel" />
    }

    <partial name="_Topic.TopMenu" model="Model.Topics"/>

    @if (Model.DisplaySearchMenu | Model.DisplayNewProductsMenu | Model.DisplayCustomerMenu | Model.DisplayBlogMenu | Model.DisplayForumsMenu | Model.DisplayContactUsMenu)
    {
        <li class="blank-link"></li>
        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenu)
        {
            <li class="nav-item solo-link-item">
                <a class="nav-link" href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a>
            </li>
        }
        @if (Model.DisplaySearchMenu)
        {
            <li class="nav-item solo-link-item"><a class="nav-link" href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
        }
        @if (Model.DisplayCustomerMenu)
        {
            <li class="nav-item solo-link-item"><a class="nav-link" href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
        }
        @if (Model.BlogEnabled && Model.DisplayBlogMenu)
        {
            <li class="nav-item solo-link-item"><a class="nav-link" href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
        }
        @if (Model.ForumEnabled && Model.DisplayForumsMenu)
        {
            <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
        }
        @if (Model.DisplayContactUsMenu)
        {
            <li class="nav-item"><a class="nav-link" href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
        }
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_after" })

    @{
        var rootCategoriesResponsive = Model.Categories.ToList();
        //name it "Categories" if we have only categories. Otherwise, "Menu"
        var responsiveMenuTitle = (rootCategoriesResponsive.Any() && Model.Topics.Any()) ? T("Categories") : T("Menu");
    }
